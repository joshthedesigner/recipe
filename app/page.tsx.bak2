'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import ChatInterface from '@/components/ChatInterface';
import RecipeCard from '@/components/RecipeCard';
import RecipeModal from '@/components/RecipeModal';
import FavoritesSidebar from '@/components/FavoritesSidebar';
import { getCurrentUser } from '@/lib/auth-helpers';
import { getAllRecipes } from '@/lib/recipes';
import { getFavorites, addFavorite, removeFavorite } from '@/lib/favorites';
import { signOut } from '@/lib/auth-helpers';
import { Recipe } from '@/lib/supabase';
import Link from 'next/link';
import {
  AppBar,
  Toolbar,
  Typography,
  Button,
  Box,
  Container,
  Grid,
  Tabs,
  Tab,
  CircularProgress,
  IconButton,
  Menu,
  MenuItem,
  Divider,
} from '@mui/material';
import RestaurantIcon from '@mui/icons-material/Restaurant';
import ChatIcon from '@mui/icons-material/Chat';
import GridViewIcon from '@mui/icons-material/GridView';
import LogoutIcon from '@mui/icons-material/Logout';
import LoginIcon from '@mui/icons-material/Login';
import PersonAddIcon from '@mui/icons-material/PersonAdd';
import MenuIcon from '@mui/icons-material/Menu';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';

export default function Home() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [recipes, setRecipes] = useState<any[]>([]);
  const [favorites, setFavorites] = useState<any[]>([]);
  const [selectedRecipe, setSelectedRecipe] = useState<any>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [view, setView] = useState<'chat' | 'browse'>('chat');
  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (mounted) {
      loadUser();
      loadRecipes();
    }
  }, [mounted]);

  const loadUser = async () => {
    const { user: currentUser } = await getCurrentUser();
    setUser(currentUser);
    
    if (currentUser) {
      loadFavorites(currentUser.id);
    }
    
    setIsLoading(false);
  };

  const loadRecipes = async () => {
    const { recipes: allRecipes } = await getAllRecipes();
    setRecipes(allRecipes);
  };

  const loadFavorites = async (userId: string) => {
    const { favorites: userFavorites } = await getFavorites(userId);
    setFavorites(userFavorites);
  };

  const handleFavoriteToggle = async (recipeId: string) => {
    if (!user) {
      router.push('/login');
      return;
    }

    const isFav = favorites.some((fav) => fav.id === recipeId);

    if (isFav) {
      await removeFavorite(recipeId, user.id);
    } else {
      await addFavorite(recipeId, user.id);
    }

    loadFavorites(user.id);
  };

  const handleDeleteRecipe = async (recipeId: string) => {
    if (!user) return;
    
    if (confirm('Are you sure you want to delete this recipe?')) {
      const { deleteRecipe } = await import('@/lib/recipes');
      const result = await deleteRecipe(recipeId, user.id);
      
      if (result.success) {
        loadRecipes();
        loadFavorites(user.id);
      } else {
        alert(`Failed to delete recipe: ${result.error}`);
      }
    }
  };

  const handleViewRecipe = (recipe: Recipe) => {
    setSelectedRecipe(recipe);
    setIsModalOpen(true);
  };

  const handleSignOut = async () => {
    await signOut();
    setUser(null);
    setFavorites([]);
    router.refresh();
  };

  // Don't render anything until mounted (prevents hydration mismatch)
  if (!mounted) {
    return null;
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
      {/* App Bar - ChatGPT Style */}
      <AppBar
        position="static"
        elevation={0}
        sx={{
          bgcolor: 'white',
          color: '#2d333a',
          borderBottom: '1px solid #d9d9e3',
        }}
      >
        <Toolbar sx={{ minHeight: '56px !important' }}>
          {/* Left Section - Menu & Logo */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
            <IconButton
              size="small"
              onClick={(e) => setMenuAnchor(e.currentTarget)}
              sx={{ color: '#8e8ea0' }}
            >
              <MenuIcon />
            </IconButton>
            
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography
                variant="h6"
                sx={{
                  fontWeight: 600,
                  fontSize: '18px',
                  color: '#2d333a',
                }}
              >
                ðŸ§ž Recipe Genie
              </Typography>
            </Box>
          </Box>

          {/* Center - View Indicator (subtle) */}
          <Box sx={{ flexGrow: 1, display: 'flex', justifyContent: 'center' }}>
            <Typography
              variant="body2"
              sx={{
                color: '#8e8ea0',
                fontSize: '14px',
              }}
            >
              {view === 'chat' ? 'Chat' : 'Browse Recipes'}
            </Typography>
          </Box>

          {/* Right Section - User */}
          {user ? (
            <IconButton
              size="small"
              onClick={(e) => setMenuAnchor(e.currentTarget)}
              sx={{
                bgcolor: '#19c37d',
                color: 'white',
                width: 32,
                height: 32,
                '&:hover': { bgcolor: '#17a368' },
              }}
            >
              <AccountCircleIcon fontSize="small" />
            </IconButton>
          ) : (
            <Button
              variant="outlined"
              size="small"
              startIcon={<LoginIcon />}
              onClick={() => router.push('/login')}
              sx={{
                textTransform: 'none',
                borderColor: '#d9d9e3',
                color: '#2d333a',
                '&:hover': { borderColor: '#19c37d', color: '#19c37d' },
              }}
            >
              Sign In
            </Button>
          )}
        </Toolbar>
      </AppBar>

      {/* Menu Dropdown */}
      <Menu
        anchorEl={menuAnchor}
        open={Boolean(menuAnchor)}
        onClose={() => setMenuAnchor(null)}
        PaperProps={{
          sx: {
            minWidth: 200,
            mt: 0.5,
          },
        }}
      >
        <MenuItem onClick={() => { setView('chat'); setMenuAnchor(null); }}>
          <ChatIcon fontSize="small" sx={{ mr: 1.5 }} />
          Chat
        </MenuItem>
        <MenuItem onClick={() => { setView('browse'); setMenuAnchor(null); }}>
          <GridViewIcon fontSize="small" sx={{ mr: 1.5 }} />
          Browse Recipes
        </MenuItem>
              <Typography variant="h1" sx={{ color: "blue", fontSize: "72px", my: 5, textAlign: "center" }}>
                ðŸŽ‰ DIRECT TERMINAL EDIT TEST ðŸŽ‰
              </Typography>        
        {user && <Divider sx={{ my: 1 }} />}
        {user && (
          <MenuItem disabled>
            <Typography variant="body2" color="text.secondary" sx={{ fontSize: '13px' }}>
              {user.email}
            </Typography>
          </MenuItem>
        )}
        {user && (
          <MenuItem onClick={() => { handleSignOut(); setMenuAnchor(null); }}>
            <LogoutIcon fontSize="small" sx={{ mr: 1.5 }} />
            Sign Out
          </MenuItem>
        )}
        
        {!user && <Divider sx={{ my: 1 }} />}
        {!user && (
          <MenuItem onClick={() => { router.push('/signup'); setMenuAnchor(null); }}>
            <PersonAddIcon fontSize="small" sx={{ mr: 1.5 }} />
            Sign Up
          </MenuItem>
        )}
      </Menu>

      {/* Main Content */}
      <Box sx={{ flexGrow: 1, overflow: 'hidden', position: 'relative' }}>
        {/* Loading Overlay - only shows after mount to prevent hydration mismatch */}
        {mounted && isLoading && (
          <Box
            sx={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              bgcolor: 'rgba(255, 255, 255, 0.9)',
              zIndex: 9999,
            }}
          >
            <CircularProgress size={60} />
          </Box>
        )}
        
        {view === 'chat' ? (
          <ChatInterface 
            userId={user?.id || null} 
            onRecipeSaved={loadRecipes}
          />
        ) : (
          <Box sx={{ height: '100%', overflowY: 'auto', bgcolor: 'background.default', py: 4 }}>
            <Container maxWidth="lg">
              <Typography variant="h4" component="h1" gutterBottom fontWeight="bold">
                All Recipes ({recipes.length})
              </Typography>
              
              {recipes.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 8 }}>
                  <RestaurantIcon sx={{ fontSize: 80, color: 'action.disabled', mb: 2 }} />
                  <Typography variant="h6" color="text.secondary" gutterBottom>
                    No recipes yet!
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Start by chatting with the Recipe Genie to add your first recipe.
                  </Typography>
                </Box>
              ) : (
                <Grid container spacing={3}>
                  {recipes.map((recipe) => (
                    <Grid 
                      item 
                      xs={12} 
                      sm={6} 
                      md={3} 
                      key={recipe.id}
                      sx={{ 
                        display: 'flex',
                        maxWidth: { xs: '100%', sm: '50%', md: 'calc(25% - 18px)' },
                        flexBasis: { xs: '100%', sm: '50%', md: 'calc(25% - 18px)' },
                        flexGrow: 0,
                        flexShrink: 0,
                      }}
                    >
                      <RecipeCard
                        recipe={recipe}
                        onView={handleViewRecipe}
                        onFavorite={user ? handleFavoriteToggle : undefined}
                        onDelete={user ? handleDeleteRecipe : undefined}
                        isFavorited={favorites.some((fav) => fav.id === recipe.id)}
                      />
                    </Grid>
                  ))}
                </Grid>
              )}
            </Container>
          </Box>
        )}
      </Box>

      {/* Recipe Modal */}
      <RecipeModal
        recipe={selectedRecipe}
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />

      {/* Favorites Sidebar */}
      {user && (
        <FavoritesSidebar
          favorites={favorites}
          onRecipeClick={handleViewRecipe}
          onRemoveFavorite={(recipeId) => {
            removeFavorite(recipeId, user.id);
            loadFavorites(user.id);
          }}
        />
      )}
    </Box>
  );
}
